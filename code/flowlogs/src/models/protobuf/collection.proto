syntax = "proto3";
package collection;

import "google/protobuf/timestamp.proto";

option go_package = "gtihub.com/lightlytics/lightlytics/shared/protobuf/collection";


// The enums match flow log https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html do not change them
enum FlowLogAction {
  ACCEPT = 0;
  REJECT = 1;
}

enum FlowLogStatus {
  OK = 0;
  NODATA = 1;
  SKIPDATA = 2;
}

enum FlowLogsDeviceType {
  VPC = 0;
  SUBNET = 1;
  ENI = 2;
  // will be removed later
  S3_ACCESS_LOG = 3;
  AZURE_FLOW_LOGS = 4;
  GCP_FLOW_LOGS = 5;
}

message FlowLogsProtocol {
  string protocol = 1;
  uint32 protocol_code = 2;
}

enum FlowLogMessageType {
  FLOW_LOGS = 0;
  S3_ACCESS_LOGS = 1;
}

enum FlowLogDirection {
  UNKNOWN = 0;
  ingress = 1;
  egress = 2;
}


// https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html
message VpcFlowLog {
  uint32 id = 1;
  uint32 version = 2;
  uint64 account_id = 3;
  string region = 4;
  string vpc_id = 5;
  string subnet_id = 6;
  string interface_id = 7;
  string instance_id = 8;
  string srcaddr = 9;
  string pkt_srcaddr = 10;
  uint32 srcport = 11;
  string dstaddr = 12;
  string pkt_dstaddr = 13;
  uint32 dstport = 14;
  FlowLogsProtocol protocol = 15;
  uint32 packets = 16;
  uint32 bytes = 17;
  //  The time, in Unix seconds, when the first packet of the flow was received within the aggregation interval. This might be up to 60 seconds after the packet was transmitted or received on the network interface.
  google.protobuf.Timestamp start = 18;
  //  The time, in Unix seconds, when the last packet of the flow was received within the aggregation interval. This might be up to 60 seconds after the packet was transmitted or received on the network interface.
  google.protobuf.Timestamp end = 19;
  FlowLogAction action = 20;
  uint32 tcp_flags = 21;
  FlowLogStatus log_status = 22;
  FlowLogMessageType internal_message_type = 23;
  // todo(zeev1): create an enrichment object
  // pkt-src-aws-service / pkt-dst-aws-service
  string src_resource_id = 24;
  string dst_resource_id = 25;
  string src_resource_type = 26;
  string dst_resource_type = 27;
  string src_resource_display_name = 28;
  string dst_resource_display_name = 29;
  string s3_action = 30;
  string application_name = 32;
  string application_desc = 33;
  string src_nic_id = 34;
  string dst_nic_id = 35;
  string src_dns_name = 36;
  string dst_dns_name = 37;
  // v5 - The direction of the flow with respect to the interface where traffic is captured. The possible values are: ingress | egress.
  FlowLogDirection flow_direction = 38;
}

message S3AccessLog {
  //  The name of the bucket that stores the object being copied.
  string bucketName = 1;
  // The time at which the request was received
  google.protobuf.Timestamp request_time = 2;
  // The apparent internet address of the requester. Intermediate proxies and firewalls might obscure the actual address of the machine making the request.
  string remote_ip = 3;
  // A string generated by Amazon S3 to uniquely identify each request.
  string requester_id = 4;
  // The operation listed here is declared as SOAP.operation, REST.HTTP_method.resource_type, WEBSITE.HTTP_method.resource_type, or BATCH.DELETE.OBJECT, or S3.action.resource_type for Lifecycle and logging.
  string operation = 5;
  // The "key" part of the request, URL encoded, or "-" if the operation does not take a key parameter.
  string key = 6;
  // The numeric HTTP status code of the response.
  uint32 status = 7;
  // The Amazon S3 Error code, or "-" if no error occurred.
  string error_code = 8;
  // The endpoint used to connect to Amazon S3.
  string endpoint = 9;
}

message S3AccessLogs {
  repeated S3AccessLog logs = 1;
  uint64 account_id = 2;
  // The Lighlytics customer ID, populated by the SAAS side
  string customer_id = 3;
  string region = 4;
}

message VpcFlowLogs {
  // since flow logs come in a space delimited syntax and can have various structures we must first get the structure.
  repeated string flow_log_fields = 1;
  uint64 account_id = 2;
  // The Lighlytics customer ID, populated by the SAAS side
  string customer_id = 3;
  // the device that emits the flow logs, one of FlowLogsDeviceType - atm ONLY VPC
  // todo(zeev1): remove device_id
  string device_id = 4;
  FlowLogsDeviceType device_type = 5;
  repeated VpcFlowLog logs = 6;
  string region = 7;
  string vpc_id = 8;
  string account_id_string = 9;
}

message IAMLog {
  string eventTime = 1;
  string sourceIPAddress = 2;
  string identity = 3;
  string identityType = 4;
  string action = 5;
  string destination = 6;
  string additionalInfo = 7;
  string region = 8;
  uint32 count = 9;
  string userAgent = 10;
  string sessionName = 11;
  bool consoleSession = 12;
  string errorCode = 13;
  string errorMessage = 14;
  bool mfaAuthenticated = 15;
  string accountId = 16;
  string sessionId = 17;
  string newSessionId = 18;
  string newSessionExpiration = 19;
}

message IAMLogsBatch {
  repeated IAMLog logs = 1;
  string account_id = 2;
}
